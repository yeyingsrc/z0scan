#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# JiuZero 2025.03.24

import argparse
import os
import sys
import config
from lib.core.log import logger

def int_list(value):
    try:
        values = list(map(int, value.split(',')))
        for v in values:
            if v not in (0, 1, 2, 3, 4):
                logger.error(f"Invalid option {v} (allowed values: 0-4)")
                sys.exit(0)
        return values
    except ValueError:
        logger.error("The parameter is in the wrong format, please use comma-separated integers (e.g. 1, 2, 3)")
        sys.exit(0)

def str_list(value):
    try:
        values = list(map(str, value.split(',')))
        return values
    except ValueError:
        logger.error("The parameter is malformed, please use comma-separated characters")
        sys.exit(0)

def cmd_line_parser(argv=None):
    """
    This function parses the command line parameters and arguments
    """

    if not argv:
        argv = sys.argv

    _ = os.path.basename(argv[0])
    usage = "z0scan [options]"
    parser = argparse.ArgumentParser(prog='Z0SCAN', usage=usage)
    parser.add_argument("-v", "--version", dest="version", action="store_true", help="Show program's version number and exit")
    parser.add_argument("--debug", dest="debug", action="store_true", default=False, help="Show programs's exception")
    parser.add_argument("-l", "--level", dest="level", type=int_list, default=config.LEVEL, help="Different level use different kind of scanner (Default {})".format(config.LEVEL))
    # Proxy options
    proxy = parser.add_argument_group('Proxy', 'Passive Agent Mode Options')
    proxy.add_argument("-s", "--server-addr", dest="server_addr", help="Server addr format:(ip:port) ")
    # Target options
    target = parser.add_argument_group('Target', "Options has to be provided to define the target(s)")
    target.add_argument("-u", "--url", dest="url", help="Target URL (e.g. \"http://www.site.com/vuln.php?id=1\")")
    target.add_argument("-f", "--file", dest="url_file", help="Scan multiple targets given in a textual file")
    # Requests options
    request = parser.add_argument_group("Request", "Network request options")
    request.add_argument("-p", "--proxy", dest="proxy", help="Use a proxy to connect to the target URL,Support http,https,socks5,socks4 eg:http@127.0.0.1:8080 or socks5@127.0.0.1:1080")
    request.add_argument("--timeout", dest="timeout", default=config.TIMEOUT, help="Seconds to wait before timeout connection (Default {})".format(config.TIMEOUT), type=int)
    request.add_argument("--retry", dest="retry", type=int, default=config.RETRY, help="Time out retrials times (Default {})".format(config.RETRY))
    request.add_argument("--random-agent", dest="random_agent", action="store_true", default=False, help="Use randomly selected HTTP User-Agent header value")
    # Outout options
    output = parser.add_argument_group("Output", "Output options")
    output.add_argument("--html", dest="html", help="When selected, the output will be output to the output directory by default, or you can specify", action='store_true')
    output.add_argument("--json", dest="json", help="The json file is generated by default in the output directory, you can change the path")
    # Optimization options
    optimization = parser.add_argument_group("Optimization", "Optimization options")
    optimization.add_argument('-t', "--threads", dest="threads", type=int, help="Max number of concurrent network requests (Default {})".format(config.THREAD_NUM))
    optimization.add_argument("-iw", '--ignore-waf', dest='ignore_waf', action="store_true", default=False, help="Ignore the WAF during detection")
    optimization.add_argument("-sc", '--scan-cookie', dest='scan_cookie', action="store_true", default=False, help="Scan cookie during detection")
    optimization.add_argument('--disable', dest='disable', type=str_list, default=[], help="Disable some plugins (e.g. --disable SQLiBool,SQLiTime)")
    optimization.add_argument('--able', dest='able', type=str_list, default=[], help="Enable some moudle (e.g. --enable SQLiBool,SQLiTime)")

    args = parser.parse_args()
    dd = args.__dict__
    if not any((dd.get("server_addr"), dd.get("url"), dd.get("url_file"), dd.get("version"))):
        errMsg = "missing a mandatory option (-s, --server-addr, -u, -f, -r, --url, --file). "
        errMsg += "Use -h for basic and -hh for advanced help\n"
        parser.error(errMsg)
    return dd
